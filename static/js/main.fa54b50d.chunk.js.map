{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["CustomBarLabel","props","payload","x","y","width","value","height","name","react_default","a","createElement","fill","textAnchor","dy","concat","Math","round","BarName","transform","font-size","toUpperCase","CustomTooltip","this","active","_this$props","label","className","rank","Component","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","setTopDmg","request","err","response","body","console","log","data","JSON","parse","sort","b","hero_damage_avg_per_10m","map","player","i","setState","filter","header","setBottomDmg","dataLength","length","state","lib","es6","dataKey","tickSize","tickMargin","content","App_CustomTooltip","App_CustomBarLabel","App_BarName","onClick","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.fa54b50d.chunk.js","sourcesContent":["import React, { Component, Fragment } from 'react';\nimport request from \"request\";\nimport { Container, Row, Col, Button } from \"react-materialize\";\nimport { BarChart, CartesianGrid, XAxis, YAxis, Tooltip, Legend, Bar, Label, LabelList } from \"recharts\";\nimport \"./App.scss\";\n\nconst CustomBarLabel = props => {\n  let { payload, x, y, width, height, value, name } = props;\n  return <text x={x + width / 2} y={y} fill=\"#666\" textAnchor=\"middle\" dy={-6}>{`${Math.round(value)}`}</text>;\n};\n\nconst BarName = props => {\n  let { payload, x, y, width, height, value, name } = props;\n  return (\n    <text\n      x={x + width / 2}\n      y={450}\n      dy={14}\n      fill=\"white\"\n      transform={`rotate(270 ${x + width / 2}, 450)`}\n      font-size=\"40px\"\n    >\n      {`${value.toUpperCase()}`}\n    </text>\n  )\n};\n\nclass CustomTooltip extends Component {\n  render() {\n    const { active } = this.props;\n\n    if (active) {\n      const { label, payload } = this.props;\n      return (\n        <div className=\"custom-tooltip\">\n          <p className=\"label\">{`${label}`}</p>\n          <p className=\"desc\">{`Rank: ${payload[0].payload.rank}`}</p>\n          <p className=\"desc\">{`Damage per 10m: ${Math.round(payload[0].value)}`}</p>\n        </div>\n      );\n    }\n    return null;\n  }\n}\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: [],\n      header: \"Loading...\"\n    };\n  }\n\n  setTopDmg = () => {\n    request(\"https://api.overwatchleague.com/stats/players\", (err, response, body) => {\n      if (err) console.log(\"Error: \", err);\n\n      let data = JSON.parse(body).data;\n\n      data.sort((a, b) => b.hero_damage_avg_per_10m - a.hero_damage_avg_per_10m);\n\n      data = data.map((player, i) => {\n        player.rank = i + 1;\n        return player;\n      });\n\n      this.setState({\n        data: data.filter((player, i) => i < 10),\n        header: \"Top 10 damage dealers\"\n      })\n    });\n  }\n\n  setBottomDmg = () => {\n    request(\"https://api.overwatchleague.com/stats/players\", (err, response, body) => {\n      if (err) console.log(\"Error: \", err);\n\n      let data = JSON.parse(body).data;\n      let dataLength = data.length;\n\n      data.sort((a, b) => a.hero_damage_avg_per_10m - b.hero_damage_avg_per_10m);\n\n      data = data.map((player, i) => {\n        player.rank = dataLength - i;\n        return player;\n      });\n\n      this.setState({\n        data: data.filter((player, i) => i < 10),\n        header: \"Bottom 10 damage dealers\"\n      })\n    });\n  }\n\n  componentDidMount() {\n    this.setTopDmg();\n  }\n\n  render() {\n    return (\n      <Container>\n        <h1>OWL Stats</h1>\n        <h2>{this.state.header}</h2>\n        <BarChart width={600} height={500} data={this.state.data}>\n          <XAxis dataKey=\"rank\" tickSize={0} tickMargin={8} />\n          <Tooltip content={<CustomTooltip />} />\n          <Bar dataKey=\"hero_damage_avg_per_10m\" fill=\"#8884d8\" label={<CustomBarLabel />} >\n            <LabelList dataKey=\"name\" content={<BarName />} />\n          </Bar>\n        </BarChart>\n        <Button onClick={this.setTopDmg}>Top</Button>\n        <Button onClick={this.setBottomDmg}>Bottom</Button>\n      </Container>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}