{"version":3,"sources":["components/BarGraphName/index.js","components/BarGraphLabel/index.js","components/BarGraphTooltip/index.js","components/BarGraph/index.js","App.js","serviceWorker.js","index.js"],"names":["BarGraphName","props","payload","x","width","y","value","height","react_default","a","createElement","id","stdDeviation","result","dx","dy","transform","concat","fontSize","style","filter","fill","toUpperCase","getFontColor","BarGraphLabel","textAnchor","Math","round","BarGraphTooltip","active","label","className","name","team","sortBy","getMessage","rank","BarGraph","setBarColor","lib","es6","data","dataKey","tickSize","tickMargin","hide","padding","top","domain","ticks","content","components_BarGraphTooltip","getSortKey","components_BarGraphLabel","components_BarGraphName","map","player","i","key","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","getPlayerData","request","err","response","body","console","log","JSON","parse","setState","playerData","pages","ceil","length","sortData","state","header","sort","b","hero_damage_avg_per_10m","healing_avg_per_10m","graphData","pagination","handlePageSelect","event","page","handleSelect","target","_this2","s","xl","components_BarGraph","activePage","maxButtons","items","onSelect","onChange","disabled","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4a66c4a3.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst BarGraphName = props => {\r\n  let { payload, x, y, width, height, value } = props;\r\n\r\n  const getFontColor = fill => {\r\n    switch (fill) {\r\n      case \"#feda00\":\r\n      case \"#f99f29\":\r\n      case \"#97d700\":\r\n      case \"#aa8a00\":\r\n      case \"#59cbe8\":\r\n      case \"#ffa000\":\r\n      case \"#fb7299\":\r\n      case \"#2FB228\":\r\n      case \"#c4c4c4\":\r\n      case \"#67a2b2\":\r\n        return \"white\";\r\n      default:\r\n        return \"white\";\r\n    }\r\n  };\r\n  \r\n  return (\r\n    <g>\r\n      <defs>\r\n        <filter id=\"shadowd\" x=\"-1%\" y=\"-1%\" width=\"140%\" height=\"140%\">\r\n          <feGaussianBlur stdDeviation=\"2 2\" result=\"shadow\" />\r\n          <feOffset dx=\"-1\" dy=\"1\" />\r\n        </filter>\r\n      </defs>\r\n      <text\r\n        x={x + width / 2}\r\n        y={450}\r\n        dy={14}\r\n        transform={`rotate(270 ${x + width / 2}, 450)`}\r\n        fontSize=\"40px\"\r\n        style={{ filter: \"url(#shadowd)\" }}\r\n        fill=\"rgba(0, 0, 0, .5)\"\r\n      >\r\n        {`${value.toUpperCase()}`}\r\n      </text>\r\n      <text\r\n        x={x + width / 2}\r\n        y={450}\r\n        dy={14}\r\n        transform={`rotate(270 ${x + width / 2}, 450)`}\r\n        fontSize=\"40px\"\r\n        fill={getFontColor(props.fill)}\r\n      >\r\n        {`${value.toUpperCase()}`}\r\n      </text>\r\n    </g>\r\n  );\r\n};\r\n\r\nexport default BarGraphName;\r\n","import React from \"react\";\r\n\r\nconst BarGraphLabel = props => {\r\n  let { payload, x, y, width, height, value } = props;\r\n\r\n  return (\r\n    <text\r\n      x={x + width / 2}\r\n      y={y} fill=\"#666\"\r\n      dy={-6}\r\n      textAnchor=\"middle\"\r\n    >\r\n      {`${Math.round(value)}`}\r\n    </text>\r\n  );\r\n};\r\n\r\nexport default BarGraphLabel;\r\n","import React from \"react\";\r\n\r\nconst BarGraphTooltip = props => {\r\n  const { active, label, payload } = props;\r\n\r\n  const getMessage = sortBy => {\r\n    switch(sortBy) {\r\n      case \"damage\":\r\n        return \"Damage per 10m\";\r\n      case \"healing\":\r\n        return \"Healing per 10m\";\r\n      default: \r\n        return \"Damage per 10m\";\r\n    }\r\n  };\r\n\r\n  if (active && payload) {\r\n    return (\r\n      <div className=\"custom-tooltip\">\r\n        <p className=\"label\">{`${payload[0].payload.name}`}</p>\r\n        <p className=\"desc\">{`Team: ${payload[0].payload.team}`}</p>\r\n        <p className=\"desc\">{`${getMessage(props.sortBy)}: ${Math.round(payload[0].value)}`}</p>\r\n        <p className=\"desc\">{`Rank: ${payload[0].payload.rank}`}</p>\r\n      </div>\r\n    );\r\n  }\r\n  return null;\r\n}\r\n\r\nexport default BarGraphTooltip;\r\n","import React from \"react\";\r\nimport { Card, CardPanel } from \"react-materialize\";\r\nimport { BarChart, XAxis, YAxis, Tooltip, Bar, LabelList, Cell, ResponsiveContainer } from \"recharts\";\r\n\r\nimport BarGraphName from \"../../components/BarGraphName\";\r\nimport BarGraphLabel from \"../../components/BarGraphLabel\";\r\nimport BarGraphTooltip from \"../../components/BarGraphTooltip\";\r\n\r\nconst BarGraph = props => {\r\n  const setBarColor = team => {\r\n    switch (team) {\r\n      case \"DAL\":\r\n        return \"#0072ce\";\r\n      case \"PHI\":\r\n        return \"#f99f29\";\r\n      case \"HOU\":\r\n        return \"#97d700\";\r\n      case \"BOS\":\r\n        return \"#174b97\";\r\n      case \"NYE\":\r\n        return \"#171c38\";\r\n      case \"SFS\":\r\n        return \"#fc4c02\";\r\n      case \"VAL\":\r\n        return \"#004438\";\r\n      case \"GLA\":\r\n        return \"#3c1053\";\r\n      case \"FLA\":\r\n        return \"#feda00\";\r\n      case \"SHD\":\r\n        return \"#d22630\";\r\n      case \"SEO\":\r\n        return \"#aa8a00\";\r\n      case \"LDN\":\r\n        return \"#59cbe8\";\r\n      case \"CDH\":\r\n        return \"#ffa000\";\r\n      case \"HZS\":\r\n        return \"#fb7299\";\r\n      case \"PAR\":\r\n        return \"#303d56\";\r\n      case \"TOR\":\r\n        return \"#000000\";\r\n      case \"VAN\":\r\n        return \"#2fb228\";\r\n      case \"WAS\":\r\n        return \"#990034\";\r\n      case \"ATL\":\r\n        return \"#c4c4c4\";\r\n      case \"GZC\":\r\n        return \"#67a2b2\";\r\n      default:\r\n        return \"red\";\r\n    }\r\n  };\r\n\r\n  const getSortKey = sortBy => {\r\n    switch (sortBy) {\r\n      case \"damage\":\r\n        return \"hero_damage_avg_per_10m\";\r\n      case \"healing\":\r\n        return \"healing_avg_per_10m\";\r\n      default:\r\n        return \"hero_damage_avg_per_10m\";\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Card>\r\n      <BarChart data={props.data} width={600} height={500} >\r\n        <XAxis dataKey=\"rank\" tickSize={0} tickMargin={8} />\r\n        <YAxis hide={false} padding={{ top: 15 }} domain={[0, \"dataMax\"]} ticks={[5000, 10000]} />\r\n        <Tooltip content={<BarGraphTooltip sortBy={props.sortBy} />} />\r\n        <Bar dataKey={getSortKey(props.sortBy)} fill=\"black\" label={<BarGraphLabel />}>\r\n          <LabelList dataKey=\"name\" content={<BarGraphName />} />\r\n          {\r\n            props.data && props.data.map((player, i) => (\r\n              <Cell key={`cell-${i}`} fill={setBarColor(player.team)} />\r\n            ))\r\n          }\r\n        </Bar>\r\n      </BarChart>\r\n    </Card>\r\n  );\r\n}\r\n\r\nexport default BarGraph;\r\n","import React, { Component, Fragment } from \"react\";\nimport request from \"request\";\nimport { Container, Row, Col, Pagination, Select, Card } from \"react-materialize\";\nimport \"./App.scss\";\n\nimport BarGraph from \"./components/BarGraph\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      playerData: [],\n      graphData: [],\n      sortBy: \"damage\",\n      header: \"Loading...\",\n      pagination: 1,\n      pages: 10\n    };\n  }\n\n  getPlayerData = () => {\n    request(\"https://api.overwatchleague.com/stats/players\", (err, response, body) => {\n      if (err) console.log(\"Error: \", err);\n\n      let data = JSON.parse(body).data;\n\n      this.setState({\n        playerData: data,\n        pages: Math.ceil(data.length / 10)\n      }, () => this.sortData(this.state.playerData, this.state.sortBy));\n    });\n  };\n\n  sortData = (data, sortBy) => {\n    if (!data) return;\n\n    let header = \"\";\n\n    switch (sortBy) {\n      case \"damage\":\n        data.sort((a, b) => b.hero_damage_avg_per_10m - a.hero_damage_avg_per_10m);\n        data = data.map((player, i) => {\n          player.rank = i + 1;\n          return player;\n        });\n        header = \"Top damage dealers\";\n        break;\n      case \"healing\":\n        data.sort((a, b) => b.healing_avg_per_10m - a.healing_avg_per_10m);\n        data = data.map((player, i) => {\n          player.rank = i + 1;\n          return player;\n        });\n        header = \"Top healers\"\n        break;\n    }\n\n    this.setState({\n      graphData: data.filter((player, i) => i < 10),\n      header,\n      pagination: 1\n    });\n  };\n\n  handlePageSelect = (event, data) => {\n    if (!data) return;\n\n    const setGraphData = page => {\n      if (page * 10 > this.state.playerData.length) {\n        return data.filter((player, i) => i >= this.state.playerData.length - 10)\n      } else {\n        return data.filter((player, i) => i >= page * 10 - 10 && i < page * 10)\n      }\n    };\n\n    this.setState({\n      graphData: setGraphData(event),\n      pagination: event,\n    });\n  };\n\n  handleSelect = event => {\n    this.setState({\n      sortBy: event.target.value\n    }, () => this.sortData(this.state.playerData, this.state.sortBy));\n  };\n\n  componentDidMount() {\n    this.getPlayerData();\n  }\n\n  render() {\n    return (\n      <Container>\n        <h1>OWL Stats</h1>\n        <h2>{this.state.header}</h2>\n        <Row>\n          <Col s={12} xl={7}>\n            <BarGraph\n              data={this.state.graphData}\n              sortBy={this.state.sortBy}\n            />\n            <Pagination\n              className=\"center-align\"\n              activePage={this.state.pagination}\n              maxButtons={10}\n              items={this.state.pages}\n              onSelect={event => this.handlePageSelect(event, this.state.playerData)}\n            />\n          </Col>\n          <Col s={3} >\n            <Select value={this.state.sortBy} onChange={this.handleSelect} s={12} >\n              <option value=\"\" disabled>\n                Choose your option\n              </option>\n              <option value=\"damage\">\n                Damage per 10\n              </option>\n              <option value=\"healing\">\n                Healing per 10\n              </option>\n            </Select>\n          </Col>\n        </Row>\n      </Container>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}